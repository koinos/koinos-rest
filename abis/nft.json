{
  "methods": {
    "name": {
      "argument": "koinos.standards.kcs5.name_arguments",
      "return": "koinos.standards.kcs5.name_result",
      "description": "Returns the collection name",
      "entry_point": 2191741823,
      "read_only": true
    },
    "symbol": {
      "argument": "koinos.standards.kcs5.symbol_arguments",
      "return": "koinos.standards.kcs5.symbol_result",
      "description": "Returns the collection symbol",
      "entry_point": 3077209249,
      "read_only": true
    },
    "uri": {
      "argument": "koinos.standards.kcs5.uri_arguments",
      "return": "koinos.standards.kcs5.uri_result",
      "description": "Returns the collection uri",
      "entry_point": 1894111158,
      "read_only": true
    },
    "token_uri": {
      "argument": "koinos.standards.kcs5.token_uri_arguments",
      "return": "koinos.standards.kcs5.token_uri_result",
      "description": "Returns the token uri",
      "entry_point": 1078291598,
      "read_only": true
    },
    "get_info": {
      "argument": "koinos.standards.kcs5.get_info_arguments",
      "return": "koinos.standards.kcs5.get_info_results",
      "description": "Returns the collection info",
      "entry_point": 3179243600,
      "read_only": true
    },
    "owner": {
      "argument": "koinos.standards.kcs5.owner_arguments",
      "return": "koinos.standards.kcs5.owner_result",
      "description": "Returns collection owner",
      "entry_point": 1276127593,
      "read_only": true
    },
    "total_supply": {
      "argument": "koinos.standards.kcs5.total_supply_arguments",
      "return": "koinos.standards.kcs5.total_supply_result",
      "description": "Returns the collection total supply",
      "entry_point": 2967091508,
      "read_only": true
    },
    "royalties": {
      "argument": "koinos.standards.kcs5.royalties_arguments",
      "return": "koinos.standards.kcs5.royalties_result",
      "description": "Returns collection royalties",
      "entry_point": 921242832,
      "read_only": true
    },
    "balance_of": {
      "argument": "koinos.standards.kcs5.balance_of_arguments",
      "return": "koinos.standards.kcs5.balance_of_result",
      "description": "Gets the balance of an owner",
      "entry_point": 1550980247,
      "read_only": true
    },
    "owner_of": {
      "argument": "koinos.standards.kcs5.owner_of_arguments",
      "return": "koinos.standards.kcs5.owner_of_result",
      "description": "Gets the owner of a token",
      "entry_point": 3982608455,
      "read_only": true
    },
    "metadata_of": {
      "argument": "koinos.standards.kcs5.metadata_of_arguments",
      "return": "koinos.standards.kcs5.metadata_of_result",
      "description": "Gets the metadata of a token",
      "entry_point": 392990591,
      "read_only": true
    },
    "get_tokens": {
      "argument": "koinos.standards.kcs5.get_tokens_arguments",
      "return": "koinos.standards.kcs5.get_tokens_result",
      "description": "Gets tokens in a collection",
      "entry_point": 2103140055,
      "read_only": true
    },
    "get_tokens_by_owner": {
      "argument": "koinos.standards.kcs5.get_tokens_by_owner_arguments",
      "return": "koinos.standards.kcs5.get_tokens_by_owner_result",
      "description": "Gets tokens for an owner in a collection",
      "entry_point": 4229163893,
      "read_only": true
    },
    "get_approved": {
      "argument": "koinos.standards.kcs5.get_approved_arguments",
      "return": "koinos.standards.kcs5.get_approved_result",
      "description": "Gets approved address for a token",
      "entry_point": 1282609184,
      "read_only": true
    },
    "is_approved_for_all": {
      "argument": "koinos.standards.kcs5.is_approved_for_all_arguments",
      "return": "koinos.standards.kcs5.is_approved_for_all_result",
      "description": "Checks if an operator is approved by an owner",
      "entry_point": 3886779621,
      "read_only": true
    },
    "get_operator_approvals": {
      "argument": "koinos.standards.kcs5.get_operator_approvals_arguments",
      "return": "koinos.standards.kcs5.get_operator_approvals_result",
      "description": "Returns accounts allowed to operate NFTs for an owner",
      "entry_point": 3676042766,
      "read_only": true
    },
    "transfer_ownership": {
      "argument": "koinos.standards.kcs5.transfer_ownership_arguments",
      "return": "koinos.standards.kcs5.transfer_ownership_result",
      "description": "Transfer ownership",
      "entry_point": 961275650,
      "read_only": false
    },
    "set_royalties": {
      "argument": "koinos.standards.kcs5.set_royalties_arguments",
      "return": "koinos.standards.kcs5.set_royalties_result",
      "description": "Sets collection royalties",
      "entry_point": 995865963,
      "read_only": false
    },
    "set_metadata": {
      "argument": "koinos.standards.kcs5.set_metadata_arguments",
      "return": "koinos.standards.kcs5.set_metadata_result",
      "description": "Sets collection royalties",
      "entry_point": 1029287705,
      "read_only": false
    },
    "approve": {
      "argument": "koinos.standards.kcs5.approve_arguments",
      "return": "koinos.standards.kcs5.approve_result",
      "description": "Approves an address to transfer a token",
      "entry_point": 1960973952,
      "read_only": false
    },
    "set_approval_for_all": {
      "argument": "koinos.standards.kcs5.set_approval_for_all_arguments",
      "return": "koinos.standards.kcs5.set_approval_for_all_result",
      "description": "Approves or revokes an address to operate on all tokens owned by caller",
      "entry_point": 541336086,
      "read_only": false
    },
    "mint": {
      "argument": "koinos.standards.kcs5.mint_arguments",
      "return": "koinos.standards.kcs5.mint_result",
      "description": "Mints a new token",
      "entry_point": 3698268091,
      "read_only": false
    },
    "transfer": {
      "argument": "koinos.standards.kcs5.transfer_arguments",
      "return": "koinos.standards.kcs5.transfer_result",
      "description": "Transfers a token",
      "entry_point": 670398154,
      "read_only": false
    },
    "burn": {
      "argument": "koinos.standards.kcs5.burn_arguments",
      "return": "koinos.standards.kcs5.burn_result",
      "description": "Burns an existing token",
      "entry_point": 2241834181,
      "read_only": false
    }
  },
  "types": ""
}
